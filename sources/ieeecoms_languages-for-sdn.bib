@ARTICLE{LanguagesForSDN, 
author={Foster, N. and Guha, A. and Reitblatt, M. and Story, A. and Freedman, M.J. and Katta, N.P. and Monsanto, C. and Reich, J. and Rexford, J. and Schlesinger, C. and Walker, D. and Harrison, R.}, 
journal={Communications Magazine, IEEE}, 
title={Languages for software-defined networks}, 
year={2013}, 
month={February}, 
volume={51}, 
number={2}, 
pages={128-134}, 
abstract={Modern computer networks perform a bewildering array of tasks, from routing and traffic monitoring, to access control and server load balancing. However, managing these networks is unnecessarily complicated and error-prone, due to a heterogeneous mix of devices (e.g., routers, switches, firewalls, and middleboxes) with closed and proprietary configuration interfaces. Softwaredefined networks are poised to change this by offering a clean and open interface between networking devices and the software that controls them. In particular, many commercial switches support the OpenFlow protocol, and a number of campus, data center, and backbone networks have deployed the new technology. However, while SDNs make it possible to program the network, they does not make it easy. Today's OpenFlow controllers offer low-level APIs that mimic the underlying switch hardware. To reach SDNs full potential, we need to identify the right higher-level abstractions for creating (and composing) applications. In the Frenetic project, we are designing simple and intuitive abstractions for programming the three main stages of network management: monitoring network traffic, specifying and composing packet forwarding policies, and updating policies in a consistent way. Overall, these abstractions make it dramatically easier for programmers to write and reason about SDN applications.}, 
keywords={application program interfaces;computer network management;high level languages;protocols;software radio;telecommunication traffic;Frenetic project;OpenFlow controllers;OpenFlow protocol;SDN;access control;backbone networks;computer networks;data center;higher-level abstractions;intuitive abstractions;low-level API;network management;network traffic monitoring;networking devices;packet forwarding policies;proprietary configuration interfaces;server load balancing;software-defined networks;switch hardware;Control systems;IP networks;Languages;Monitoring;Ports (Computers);Repeaters;Runtime;Software radio}, 
doi={10.1109/MCOM.2013.6461197}, 
ISSN={0163-6804},}
